commit 40e7cff2c75a7ba986f9ab0ab5171dc899c57b39
Author: Dan Vr√°til <dvratil@redhat.com>
Date:   Fri Dec 6 17:08:39 2013 +0100

    Always verify writing data to external file was successfull
    
    Always make sure that QFile::write() has written all data to prevent data
    loss in case we run out of disk space.
    
    BUG: 283692
    FIXED-IN: 1.11.1

diff --git a/server/src/handler/append.cpp b/server/src/handler/append.cpp
index 6746a41..14930fb 100644
--- a/server/src/handler/append.cpp
+++ b/server/src/handler/append.cpp
@@ -62,22 +62,16 @@ bool Append::commit()
       m_size = qMax( m_size, dataSize );
       storeInFile = dataSize > DbConfig::configuredDatabase()->sizeThreshold();
       if ( storeInFile ) {
-        if ( !tmpFile.open() ) {
-          storeInFile =  false;
+        try {
+          PartHelper::streamToFile( m_streamParser, tmpFile );
+        } catch ( const PartHelperException &e ) {
+          return failureResponse( e.what() );
         }
-      }
-      while ( !m_streamParser->atLiteralEnd() ) {
-        if ( !storeInFile ) {
+      } else {
+        while ( !m_streamParser->atLiteralEnd() ) {
           m_data += m_streamParser->readLiteralPart();
-        } else {
-          m_data = m_streamParser->readLiteralPart();
-          tmpFile.write( m_data );
         }
       }
-      if ( storeInFile ) {
-        tmpFile.close();
-        m_data = "";
-      }
     } else {
       m_data = m_streamParser->readString();
     }
diff --git a/server/src/handler/store.cpp b/server/src/handler/store.cpp
index 262f4c9..19d3559 100644
--- a/server/src/handler/store.cpp
+++ b/server/src/handler/store.cpp
@@ -302,17 +302,11 @@ bool Store::parseStream()
 
           //the actual streaming code for the remaining parts:
           // reads from the parser, writes immediately to the file
-          // ### move this entire block to part helper? should be useful for append as well
-          const QString fileName = PartHelper::resolveAbsolutePath( part.data() );
-          QFile file( fileName );
-          if ( file.open( QIODevice::WriteOnly | QIODevice::Append ) ) {
-            while ( !m_streamParser->atLiteralEnd() ) {
-              value = m_streamParser->readLiteralPart();
-              file.write( value ); // ### error handling?
-            }
-            file.close();
-          } else {
-            return failureResponse( "Unable to update item part" );
+          QFile partFile( PartHelper::resolveAbsolutePath( part.data() ) );
+          try {
+            PartHelper::streamToFile( m_streamParser, partFile, QIODevice::WriteOnly | QIODevice::Append );
+          } catch ( const PartHelperException &e ) {
+            return failureResponse( e.what() );
           }
 
           changes << partName;
diff --git a/server/src/storage/parthelper.cpp b/server/src/storage/parthelper.cpp
index 67a9ecc..d510a56 100644
--- a/server/src/storage/parthelper.cpp
+++ b/server/src/storage/parthelper.cpp
@@ -23,6 +23,7 @@
 #include "entities.h"
 #include "selectquerybuilder.h"
 #include "dbconfig.h"
+#include "imapstreamparser.h"
 #include <akstandarddirs.h>
 #include <libs/xdgbasedirs_p.h>
 
@@ -201,6 +202,31 @@ void PartHelper::removeFile( const QString &fileName )
   QFile::remove( fileName );
 }
 
+bool PartHelper::streamToFile( ImapStreamParser* streamParser, QFile &file, QIODevice::OpenMode openMode )
+{
+  Q_ASSERT( openMode & QIODevice::WriteOnly );
+
+  if ( !file.isOpen() ) {
+    if ( !file.open( openMode ) ) {
+      throw PartHelperException( "Unable to update item part" );
+    }
+  } else {
+    Q_ASSERT( file.openMode() & QIODevice::WriteOnly );
+  }
+
+  QByteArray value;
+  while ( !streamParser->atLiteralEnd() ) {
+    value = streamParser->readLiteralPart();
+    if ( file.write( value ) != value.size() ) {
+      throw PartHelperException( "Unable to write payload to file" );
+    }
+  }
+  file.close();
+
+  return true;
+}
+
+
 QByteArray PartHelper::translateData( const QByteArray &data, bool isExternal )
 {
   if ( isExternal ) {
diff --git a/server/src/storage/parthelper.h b/server/src/storage/parthelper.h
index 5d1fb59..bd82ab6 100644
--- a/server/src/storage/parthelper.h
+++ b/server/src/storage/parthelper.h
@@ -26,10 +26,13 @@
 
 class QString;
 class QVariant;
+class QFile;
 
 namespace Akonadi
 {
 
+class ImapStreamParser;
+
 AKONADI_EXCEPTION_MAKE_INSTANCE( PartHelperException );
 
 /**
@@ -67,6 +70,15 @@ namespace PartHelper
    */
   void removeFile( const QString &fileName );
 
+  /**
+   * Reads data from @p streamParser as they arrive from client and writes them
+   * to @p partFile. It will close the file when all data are read.
+   *
+   * @param partFile File to write into. The file must be closed, or opened in write mode
+   * @throws PartHelperException when an error occurs (write fails, data truncated, etc)
+   */
+  bool streamToFile( ImapStreamParser *streamParser, QFile &partFile, QIODevice::OpenMode = QIODevice::WriteOnly );
+
   /** Returns the payload data. */
   QByteArray translateData( const QByteArray &data, bool isExternal );
   /** Convenience overload of the above. */
